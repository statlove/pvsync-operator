package controller

import (
	"context"
	"fmt"
	"sync"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/client-go/tools/cache"
	"k8s.io/klog/v2"
	controllerruntime "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/builder"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller"
	"sigs.k8s.io/controller-runtime/pkg/predicate"

	workv1alpha1 "github.com/karmada-io/karmada/pkg/apis/work/v1alpha1"
	"github.com/karmada-io/karmada/pkg/controllers/ctrlutil"
	"github.com/karmada-io/karmada/pkg/sharedcli/ratelimiterflag"
	"github.com/karmada-io/karmada/pkg/util"
	"github.com/karmada-io/karmada/pkg/util/fedinformer"
	"github.com/karmada-io/karmada/pkg/util/fedinformer/genericmanager"
	"github.com/karmada-io/karmada/pkg/util/fedinformer/keys"
	"github.com/karmada-io/karmada/pkg/util/helper"
	"github.com/karmada-io/karmada/pkg/util/names"
)

const PVSyncControllerName = "pv-sync-controller"

var persistentVolumeGVR = schema.GroupVersionResource{Group: "", Version: "v1", Resource: "persistentvolumes"}

type PVSyncController struct {
	client.Client
	InformerManager         genericmanager.MultiClusterInformerManager
	eventHandlers           sync.Map
	ClusterClientFunc       func(clusterName string, controlPlaneClient client.Client) (*util.DynamicClusterClient, error)
	ClusterCacheSyncTimeout metav1.Duration

	worker             util.AsyncWorker
	StopChan           <-chan struct{}
	WorkerNumber       int
	PredicateFunc      predicate.Predicate
	RateLimiterOptions ratelimiterflag.Options
}

func (c *PVSyncController) SetupWithManager(mgr controllerruntime.Manager) error {
	return controllerruntime.NewControllerManagedBy(mgr).
		Named(PVSyncControllerName).
		For(&workv1alpha1.Work{}, builder.WithPredicates(c.PredicateFunc)).
		WithOptions(controller.Options{
			RateLimiter: ratelimiterflag.DefaultControllerRateLimiter[controllerruntime.Request](c.RateLimiterOptions),
		}).
		Complete(c)
}

func (c *PVSyncController) Reconcile(ctx context.Context, req controllerruntime.Request) (controllerruntime.Result, error) {
	klog.V(4).Infof("Reconciling Work %s", req.NamespacedName.String())

	work := &workv1alpha1.Work{}
	if err := c.Client.Get(ctx, req.NamespacedName, work); err != nil {
		if errors.IsNotFound(err) {
			return controllerruntime.Result{}, nil
		}
		return controllerruntime.Result{}, err
	}

	if !work.DeletionTimestamp.IsZero() {
		return controllerruntime.Result{}, nil
	}

	clusterName, err := names.GetClusterName(work.Namespace)
	if err != nil {
		klog.Errorf("Failed to get cluster name for work %s/%s", work.Namespace, work.Name)
		return controllerruntime.Result{}, err
	}

	if err := c.buildResourceInformers(clusterName); err != nil {
		return controllerruntime.Result{}, err
	}

	c.worker.Add(keys.FederatedKey{Cluster: clusterName})
	return controllerruntime.Result{}, nil
}

func (c *PVSyncController) buildResourceInformers(clusterName string) error {
	cluster, err := util.GetCluster(c.Client, clusterName)
	if err != nil {
		return err
	}
	if !util.IsClusterReady(&cluster.Status) {
		return fmt.Errorf("cluster(%s) not ready", cluster.Name)
	}

	singleClusterInformerManager := c.InformerManager.GetSingleClusterManager(cluster.Name)
	if singleClusterInformerManager == nil {
		dynamicClusterClient, err := c.ClusterClientFunc(cluster.Name, c.Client)
		if err != nil {
			return err
		}
		singleClusterInformerManager = c.InformerManager.ForCluster(dynamicClusterClient.ClusterName, dynamicClusterClient.DynamicClientSet, 0)
	}

	if !singleClusterInformerManager.IsInformerSynced(persistentVolumeGVR) ||
		!singleClusterInformerManager.IsHandlerExist(persistentVolumeGVR, c.getEventHandler(cluster.Name)) {
		singleClusterInformerManager.ForResource(persistentVolumeGVR, c.getEventHandler(cluster.Name))
		c.InformerManager.Start(cluster.Name)
		synced := c.InformerManager.WaitForCacheSyncWithTimeout(cluster.Name, c.ClusterCacheSyncTimeout.Duration)
		if synced != nil {
			if !synced[persistentVolumeGVR] {
				return fmt.Errorf("informer for %s not synced", persistentVolumeGVR)
			}
		}
	}
	return nil
}

func (c *PVSyncController) RunWorkQueue() {
	workerOptions := util.Options{
		Name:          "pv-collector",
		KeyFunc:       nil,
		ReconcileFunc: c.collectPersistentVolume,
	}
	c.worker = util.NewAsyncWorker(workerOptions)
	c.worker.Run(c.WorkerNumber, c.StopChan)
}
func (c *PVSyncController) collectPersistentVolume(key util.QueueKey) error {
	ctx := context.Background()
	fedKey, ok := key.(keys.FederatedKey)
	if !ok {
		return fmt.Errorf("invalid key type: %v", key)
	}
	clusterName := fedKey.Cluster

	pvObj, err := helper.GetObjectFromCache(nil, c.InformerManager, fedKey) // RESTMapper는 사용 안함
	if err != nil {
		if errors.IsNotFound(err) {
			return nil
		}
		return err
	}
	pv := &corev1.PersistentVolume{}
	if err := helper.ConvertToTypedObject(pvObj, pv); err != nil {
		return err
	}
	return reportPersistentVolume(ctx, c.Client, pv, clusterName)
}

func (c *PVSyncController) getEventHandler(clusterName string) cache.ResourceEventHandler {
	if val, ok := c.eventHandlers.Load(clusterName); ok {
		return val.(cache.ResourceEventHandler)
	}
	handler := fedinformer.NewHandlerOnEvents(
		c.genHandlerAddFunc(clusterName),
		c.genHandlerUpdateFunc(clusterName),
		c.genHandlerDeleteFunc(clusterName),
	)
	c.eventHandlers.Store(clusterName, handler)
	return handler
}

func (c *PVSyncController) genHandlerAddFunc(clusterName string) func(obj interface{}) {
	return func(obj interface{}) {
		curObj := obj.(runtime.Object)
		key, err := keys.FederatedKeyFunc(clusterName, curObj)
		if err != nil {
			klog.Warningf("Failed to generate key for PV add event: %v", err)
			return
		}
		c.worker.Add(key)
	}
}

func (c *PVSyncController) genHandlerUpdateFunc(clusterName string) func(oldObj, newObj interface{}) {
	return func(_, newObj interface{}) {
		curObj := newObj.(runtime.Object)
		key, err := keys.FederatedKeyFunc(clusterName, curObj)
		if err != nil {
			klog.Warningf("Failed to generate key for PV update event: %v", err)
			return
		}
		c.worker.Add(key)
	}
}

func (c *PVSyncController) genHandlerDeleteFunc(clusterName string) func(obj interface{}) {
	return func(obj interface{}) {
		if deleted, ok := obj.(cache.DeletedFinalStateUnknown); ok {
			obj = deleted.Obj
			if obj == nil {
				return
			}
		}
		oldObj := obj.(runtime.Object)
		key, err := keys.FederatedKeyFunc(clusterName, oldObj)
		if err != nil {
			klog.Warningf("Failed to generate key for PV delete event: %v", err)
			return
		}
		c.worker.Add(key)
	}
}

func reportPersistentVolume(ctx context.Context, c client.Client, pv *corev1.PersistentVolume, clusterName string) error {
	executionSpace := names.GenerateExecutionSpaceName(clusterName)
	workName := names.GenerateWorkName("PersistentVolume", pv.Name, "")

	unstructuredPV, err := helper.ToUnstructured(pv)
	if err != nil {
		return err
	}

	meta, err := getPersistentVolumeWorkMeta(ctx, c, executionSpace, workName, pv)
	if err != nil {
		return err
	}

	return ctrlutil.CreateOrUpdateWork(ctx, c, meta, unstructuredPV, ctrlutil.WithSuspendDispatching(true))
}

func getPersistentVolumeWorkMeta(ctx context.Context, c client.Client, ns, workName string, pv *corev1.PersistentVolume) (metav1.ObjectMeta, error) {
	existWork := &workv1alpha1.Work{}
	if err := c.Get(ctx, types.NamespacedName{Namespace: ns, Name: workName}, existWork); err != nil && !errors.IsNotFound(err) {
		return metav1.ObjectMeta{}, err
	}

	ls := map[string]string{
		"pv.karmada.io/claim-namespace": "",
		"pv.karmada.io/claim-name":      "",
		"pv.karmada.io/storage-class":   pv.Spec.StorageClassName,
		"pv.karmada.io/managed-by":      "persistentvolume-collector",
	}
	if pv.Spec.ClaimRef != nil {
		ls["pv.karmada.io/claim-namespace"] = pv.Spec.ClaimRef.Namespace
		ls["pv.karmada.io/claim-name"] = pv.Spec.ClaimRef.Name
	}
	if pv.Spec.NFS != nil {
		ls["pv.karmada.io/nfs-server"] = pv.Spec.NFS.Server
		ls["pv.karmada.io/nfs-path"] = pv.Spec.NFS.Path
	}

	if existWork.Labels == nil || errors.IsNotFound(client.IgnoreNotFound(c.Get(ctx, types.NamespacedName{Namespace: ns, Name: workName}, existWork))) {
		return metav1.ObjectMeta{Name: workName, Namespace: ns, Labels: ls}, nil
	}

	ls = util.DedupeAndMergeLabels(ls, existWork.Labels)
	return metav1.ObjectMeta{
		Name:       workName,
		Namespace:  ns,
		Labels:     ls,
		Finalizers: []string{"pv.karmada.io/finalizer"},
	}, nil
}
